// OneWire - Version: 2.3.7
#include <OneWire.h>
#include <SoftwareSerial.h>
// DallasTemperature - Version: 3.9.0
#include <DallasTemperature.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/ee1c3ba5-5f4f-4de9-92ba-eee4e61f4610 
  Arduino IoT Cloud Variables description
  	bool alarm;
  	bool lubrication;
  	bool temp_Status;
  	bool vib_Status;
  	CloudTime time_On;
*/

#include "thingProperties.h"

#define ALARM_PIN 12         // LED
#define SOUND_PIN 13         // Sound Sensor
#define ONE_WIRE_BUS0 4      // Temperature Sensor
#define PIEZO_PIN A0         // Vibration Sensor
#define ENA 14               // DC Motor PWM Pin
#define IN1 0                // DC Motor Direction Input Pin 1
#define IN2 2                // DC Motor Direction Input Pin 2
#define Lubricating_Relay 5  // Relay For Turning On Lubricating System

#define monitor_TimeOn 60

float temp = 0;
float vibration = 0;
bool sound;

boolean machineOn = false;
boolean monitor = false;
// Timer: Auxiliary variables
unsigned long now = millis();
unsigned long lastTrigger = 0;
unsigned long last = 0;
boolean startTimer = false;
unsigned long StartTime = 0;
unsigned long StopTime = 0;
//unsigned long Time_ON = 0;
unsigned long LubricationPeriod = 0;
unsigned long LubricationDone = 0;

OneWire oneWire(ONE_WIRE_BUS0); 
DallasTemperature tempSensors(&oneWire);

const int sampleWindow = 50;
unsigned int sample;

void setup() {
  Serial.begin(9600);
  Serial1.begin(9600);
  
  tempSensors.begin();
  pinMode(SOUND_PIN, INPUT);
  pinMode(ALARM_PIN, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT); 
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(ENA, 150);
  digitalWrite(Lubricating_Relay, LOW);
  lubrication = false;

  delay(1500); 

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  delay(2000);
}

void loop() {
  ArduinoCloud.update();
  now = millis();
  
  int in1 = digitalRead(IN1); 
  int in2 = digitalRead(IN2);
  
  if((in1 ^ in2) & !(machineOn)){
    machineOn = true;
    StartTime = now;
  }
  else if ((in1 ^ in2) & (machineOn)) {
    StopTime = millis();
  }
  else if (!(in1 ^ IN2) & (machineOn)) {
    machineOn = false;
    StartTime = millis();
  }
  time_On = (StopTime-StartTime)/1000;
  //Serial.println(time_On);
  //Serial.println(last/1000);
  //Serial.println(lastTrigger/1000);

  tempSensors.requestTemperatures();                 //TEMPERATURE
  temp = tempSensors.getTempCByIndex(0);
  Serial.print("T: ");
  Serial.print(temp);
  Serial.print("C_");
  
  vibration = analogRead(PIEZO_PIN)/ 1023.0 * 10.0;  //VIBRATION
  Serial.print("V: ");
  Serial.println(vibration);
  
  sound = !digitalRead(SOUND_PIN);                    //SOUND
  if (sound){
    Serial.println("Max t: N/A");
  }
  else {
    Serial.println("Max t: 8h/d");
  }
  
  if((temp>80) & (vibration>4.5)){            // Case 1
    Serial.println("Danger!");
    digitalWrite(ALARM_PIN, HIGH);
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    temp_Status = true;
    vib_Status = true;
    monitor = false;
  }
  else if((temp>55) & (vibration>3.5)){       // Case 2
    //Serial.println("Schedule for Repair.");
    digitalWrite(ALARM_PIN, LOW);
    LubricationPeriod = 60;
    LubricationDone = 20;
    temp_Status = true;
    vib_Status = true;
    monitor = true;
  }
  else if ((temp <= 0) | (vibration < 0)){   // Case 3
    digitalWrite(ALARM_PIN, HIGH);
    LubricationPeriod = 150;
    LubricationDone = 15;
    if(temp <= 0){
      Serial.println("TSen NOT Working!");
      temp_Status = false;
    } else temp_Status = true;
    if(vibration <= 0){
      Serial.println("VSen NOT Working!");
      vib_Status = false;
    } else vib_Status = true;
    monitor = true;
  }
  else {
    //Serial.println("Normal Operation.");      // Case 4
    LubricationPeriod = 150;
    LubricationDone = 10;
    temp_Status = true;
    vib_Status = true;
    monitor = false;
  }
  
 // Turn off the Machine after the allowed operational time defined in the monitor_TimeOn variable
  if((monitor) && (!startTimer) && machineOn){
    lastTrigger = millis();
    startTimer = true;
  }
  // Turn off the Machine after the allowed operational time defined in the monitor_TimeOn variable
  else if(startTimer && ((now - lastTrigger) >= (monitor_TimeOn*1000)) && machineOn) {
  //else if(startTimer && (Time_ON >= (monitor_TimeOn*1000)) && machineOn) {
    Serial.println("Machine Off");
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    digitalWrite(ENA, LOW);
    startTimer = false;
  }

  if(((now-last)>=(LubricationDone*1000)) && lubrication){
    //Serial.println("Done Lubricating.");
    digitalWrite(Lubricating_Relay, LOW);
    lubrication = false;
    last = time_On; //millis();
  }
}

void onAlarmChange()  {
  // Add your code here to act upon Alarm change
  if(alarm){
    digitalWrite(ALARM_PIN, HIGH);
  }
  else{
    digitalWrite(ALARM_PIN, LOW);
  }
  delay(1000);
}

void onLubricationChange()  {
  // Add your code here to act upon Lubrication change
  if(lubrication){
    //Serial.println("Lubricating...");
    digitalWrite(Lubricating_Relay, HIGH);
    lubrication = true;
    last = millis();
  }
  else {
    //Serial.println("Done Lubricating.");
    digitalWrite(Lubricating_Relay, LOW);
    lubrication = false;
    last = millis();
  }
}